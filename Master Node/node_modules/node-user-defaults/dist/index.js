'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _untildify = require('untildify');

var _untildify2 = _interopRequireDefault(_untildify);

var _randomstring = require('randomstring');

var _randomstring2 = _interopRequireDefault(_randomstring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Use a default location with a random 5-char suffix.
var location = __dirname +'/.node-user-defaults-' + _randomstring2.default.generate(5);

// Get & set the location to a custom file path.
var getLocation = function getLocation() {
  return location;
};
var setLocation = function setLocation() {
  var output = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '~/';
  location = (0, _untildify2.default)(output);
};

// Get the complete, parsed configuration.
var store = function store() {
  return JSON.parse(_fs2.default.readFileSync(location, 'utf8'));
};
var defaults = function defaults() {
  try {
    return store();
  } catch (e) {
    return {};
  }
};

// Read the variable with given name from the current configuration.
// An optional default value van be provided in case the variable is not set.
var read = function read() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  return defaults()[name] || value;
};

// Write the provided value with the given name to the persistent configuration.
// If the given name already exists, this function will overwrite it.
var write = function write() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var content = Object.assign({}, defaults(), _defineProperty({}, name, value));
  _fs2.default.writeFileSync(location, JSON.stringify(content, null, 4));
};

// Write a complete Json structure to the persistent configuration.
// Can be used to write multiple variables at once.
var writeJson = function writeJson() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var content = Object.assign({}, defaults(), data);
  _fs2.default.writeFileSync(location, JSON.stringify(content, null, 4));
};

// Export all the functions as a default.
exports.default = { getLocation: getLocation, setLocation: setLocation, defaults: defaults, read: read, write: write, writeJson: writeJson };
